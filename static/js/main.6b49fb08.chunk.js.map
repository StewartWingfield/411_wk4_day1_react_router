{"version":3,"sources":["components/Navigation.js","components/Home.js","components/About.js","components/Car.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","AppBar","position","Toolbar","IconButton","color","Typography","variant","style","flexGrow","className","Home","console","log","cars","map","car","idx","Card","key","CardContent","Name","toUpperCase","Divider","CardActions","to","id","About","state","checked","heading","toggleSwitch","newVal","setState","Container","maxWidth","textAlign","this","href","target","rel","Switch","onChange","Component","Car","props","useParams","foundCar","find","display","justifyContent","alignItems","marginTop","sx","Chip","label","Miles_per_Gallon","Cylinders","Displacement","Horsepower","Weight_in_lbs","Acceleration","Year","Origin","Router","path","element","App","Boolean","window","location","hostname","match","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b49fb08.chunk.js","sourcesContent":["import React from 'react'\r\nimport { AppBar, Toolbar, IconButton, Typography } from '@mui/material'\r\nimport MenuIcon from '@mui/icons-material/Menu'\r\n// Import { Link } here //\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <AppBar position=\"relative\">\r\n            <Toolbar>\r\n                <IconButton color=\"inherit\">\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" style={{ flexGrow: \"1\" }}>\r\n                    FakeCars.com\r\n                </Typography>\r\n                <ul className=\"nav-list\">\r\n                    <li className=\"nav-list-item\">\r\n                        {/* Add Link here */}\r\n                    </li>\r\n                    <li className=\"nav-list-item\">\r\n                        {/* Add Link here */}\r\n                    </li>\r\n                </ul>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Navigation","import React from \"react\";\r\nimport { Card, CardContent, CardActions, Divider } from \"@mui/material\";\r\nimport cars from \"../cars.json\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  console.log(\"CARS\", cars);\r\n  return (\r\n    <div className=\"card-container\">\r\n      {cars.map((car, idx) => (\r\n        <Card key={idx} className=\"card\">\r\n          <CardContent className=\"text-gray\">\r\n            <span>{car.Name.toUpperCase()}</span>\r\n            <ul>\r\n              <li>Miles_per_Gallon: {car[\"Miles_per_Gallon\"]}</li>\r\n              <li>Cylinders: {car[\"Cylinders\"]}</li>\r\n              <li>Displacement: {car[\"Displacement\"]}</li>\r\n              <li>Horsepower: {car[\"Horsepower\"]}</li>\r\n            </ul>\r\n          </CardContent>\r\n          <Divider />\r\n          <CardActions style={{ color: \"mediumblue\" }}>\r\n            <Link to={`/car/${car.id}`}>See more Details</Link>\r\n          </CardActions>\r\n        </Card>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport { Container, Divider, Switch } from \"@mui/material\";\r\n\r\nclass About extends Component {\r\n  state = {\r\n    checked: true,\r\n    heading: \"About FakeCars.com\",\r\n  };\r\n\r\n  toggleSwitch = () => {\r\n    const newVal = !this.state.checked;\r\n    if (newVal) {\r\n      return this.setState({\r\n        heading: \"About FakeCars.com\",\r\n        checked: newVal,\r\n      });\r\n    }\r\n    return this.setState({\r\n      heading: \"About Cars.com\",\r\n      checked: newVal,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"text-gray\">\r\n        <Container maxWidth=\"sm\">\r\n          <h1 style={{ textAlign: \"center\" }}>{this.state.heading}</h1>\r\n          <p>\r\n            FakeCars.com was created to solve a specific problem. That problem\r\n            is quick and reliable access to details about many different models,\r\n            all in one place. We had to use the word \"Fake\" in our name so that\r\n            we don't get sued by the real&nbsp;\r\n            <a\r\n              style={{ color: \"mediumblue\" }}\r\n              href=\"https://www.cars.com\"\r\n              target=\"_blank\"\r\n              rel=\"noopener noreferrer\"\r\n            >\r\n              Cars.com\r\n            </a>\r\n            &nbsp;but we won't worry too much about that. We've provided a link\r\n            to the actual cars.com above and we did not receive any money from\r\n            them to do so. Although, there's an argument that maybe we should\r\n            since we are a top-notch coding bootcamp and anyone would want to be\r\n            associated with us :)\r\n          </p>\r\n          <Divider />\r\n          <p>\r\n            If you'd like you can toggle the word \"Fake\" because why not? We\r\n            have the potential to be the real cars.com if we wanted to be.\r\n          </p>\r\n          <Switch\r\n            checked={this.state.checked}\r\n            color=\"primary\"\r\n            onChange={this.toggleSwitch}\r\n          />\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\nimport cars from \"../cars.json\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Card from \"@mui/material/Card\";\r\nimport CardContent from \"@mui/material/CardContent\";\r\nimport Chip from \"@mui/material/Chip\";\r\n\r\nconst Car = (props) => {\r\n  const { id } = useParams();\r\n  console.log(\"id\", id);\r\n  const foundCar = cars.find((car) => car.id == id);\r\n  console.log(\"found\", foundCar);\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        marginTop: \"50px\",\r\n      }}\r\n    >\r\n      <Card sx={{ maxWidth: \"500px\" }}>\r\n        <CardContent>\r\n          <h1>{foundCar.Name}</h1>\r\n          <Chip label={`id: ${foundCar.id}`} />\r\n          <Chip label={`Name: ${foundCar.Name}`} />\r\n          <Chip label={`Miles_per_Gallon: ${foundCar.Miles_per_Gallon}`} />\r\n          <Chip label={`Cylinders: ${foundCar.Cylinders}`} />\r\n          <Chip label={`Displacement: ${foundCar.Displacement}`} />\r\n          <Chip label={`Horsepower: ${foundCar.Horsepower}`} />\r\n          <Chip label={`Weight_in_lbs: ${foundCar.Weight_in_lbs}`} />\r\n          <Chip label={`Acceleration: ${foundCar.Acceleration}`} />\r\n          <Chip label={`Year: ${foundCar.Year}`} />\r\n          <Chip label={`Origin: ${foundCar.Origin}`} />\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Car;\r\n","import React from \"react\";\r\nimport { Routes, Route } from \"react-router\";\r\nimport Home from \"./components/Home\";\r\nimport About from \"./components/About\";\r\nimport Car from \"./components/Car\";\r\n\r\nfunction Router() {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<Home />} />\r\n      <Route path=\"/about\" element={<About />} />\r\n      <Route path=\"/car/:id\" element={<Car />} />\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default Router;\r\n","import React from \"react\";\r\nimport Navigation from \"./components/Navigation\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport Router from \"./Router\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <Navigation />\r\n      <Router />\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst root = createRoot(document.getElementById(\"root\"));\r\nroot.render(<App />);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}